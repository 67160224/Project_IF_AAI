#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "esp_camera.h"
#include <esp_system.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
#include <WebServer.h>

WebServer server(80);

// --------- WiFi / Telegram config (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ----------
const char* ssid = "jung"; 
const char* password = "12345678"; 
String BOTtoken = "8351327796:AAH4HErPl67KCM-BUqRcoEK-N2_lpwfzbFs"; 
String CHAT_ID = "8498711569"; 

WiFiClientSecure clientTCP;
UniversalTelegramBot bot(BOTtoken, clientTCP);

// --------- App variables (Modified for conditional capture flow) ----------
#define STATE_IDLE 0
#define STATE_INITIATE_CAPTURE 1 // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏° Timed Flash Sequence (‡∏ñ‡πâ‡∏≤ flashState ‡πÄ‡∏õ‡πá‡∏ô HIGH)
#define STATE_FLASH_ON_DELAY 2
#define STATE_CAPTURE 3        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Common state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Capture/Send (‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ü‡∏•‡∏ä)

volatile int captureState = STATE_IDLE; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
unsigned long lastTriggerTime = 0;
const unsigned long cooldown = 10000;  // 10s cooldown
const unsigned long flashDelayMs = 2500; // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä (2.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
unsigned long flashOnStartTime = 0;
String statusMessage = ""; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö

#define FLASH_LED_PIN 4
bool flashState = LOW; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ü‡∏•‡∏ä‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
// Flag ‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÅ‡∏ü‡∏•‡∏ä‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢ State Machine ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
bool shouldTurnFlashOffAfterCapture = false; 

int botRequestDelay = 1000;
unsigned long lastTimeBotRan = 0;

// --------- CAMERA_MODEL_AI_THINKER (‡πÉ‡∏ä‡πâ pinout ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ----------
#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27

#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22

// ================= Camera init with retry and fallback =================
void configInitCameraWithRetry() {
  Serial.printf("configInitCameraWithRetry(): psramFound=%d freeHeap=%u\n", psramFound(), esp_get_free_heap_size());
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 10;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_VGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  esp_err_t err = ESP_FAIL;
  for (int attempt = 1; attempt <= 3; ++attempt) {
    Serial.printf("Camera init attempt %d (xclk=%u frame=%d) ...\n", attempt, (unsigned)config.xclk_freq_hz, config.frame_size);
    err = esp_camera_init(&config);
    if (err == ESP_OK) {
      Serial.println("Camera init OK");
      // configure some defaults
      sensor_t* s = esp_camera_sensor_get();
      if (s) {
        s->set_brightness(s, 0); 
        s->set_contrast(s, 2); 
        s->set_saturation(s, -2); 
        s->set_whitebal(s, 1); 
        s->set_awb_gain(s, 1); 
        s->set_wb_mode(s, 0); 
        s->set_exposure_ctrl(s, 1); 
        s->set_aec2(s, 0); 
        s->set_ae_level(s, 0); 
        s->set_aec_value(s, 300); 
        s->set_gain_ctrl(s, 1); 
        s->set_agc_gain(s, 0); 
        s->set_gainceiling(s, (gainceiling_t)0); 
        s->set_bpc(s, 0); 
        s->set_wpc(s, 1); 
        s->set_raw_gma(s, 1); 
        s->set_lenc(s, 1); 
        s->set_hmirror(s, 0); 
        s->set_vflip(s, 0); 
        s->set_dcw(s, 1); 
        s->set_colorbar(s, 0); 
        s->set_framesize(s, FRAMESIZE_VGA);
      }
      return;
    }
    Serial.printf("Camera init failed (0x%x)\n", err);
    esp_camera_deinit();
    delay(200);
    // Fallback adjustments for next attempt
    if (attempt == 1) {
      // reduce frame and xclk
      config.frame_size = FRAMESIZE_QVGA;
      config.xclk_freq_hz = 10000000;
    } else if (attempt == 2) {
      // further reduce
      config.frame_size = FRAMESIZE_QQVGA;
      config.xclk_freq_hz = 8000000;
    }
    // loop continue
  }

  Serial.printf("Camera init permanently failed with 0x%x\n", err);
}

// ================= Handle incoming Telegram messages =================
void handleNewMessages(int numNewMessages) {
  Serial.printf("Handle New Messages: %d\n", numNewMessages);
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID) {
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }

    String text = bot.messages[i].text;
    Serial.printf("From %s: %s\n", bot.messages[i].from_name.c_str(), text.c_str());
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô UTF-8)
    if (text == "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ") text = "/photo";
    
    if (text == "/camera") {
      String welcome = "üì¶ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì " + bot.messages[i].from_name + "\n";
      welcome += "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Smart Parcel Box ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ \n\n";
      welcome += "üì∑ /photo : ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏±‡∏ô‡∏ó‡∏µ\n";
      welcome += "üí° /flash : ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÑ‡∏ü‡πÅ‡∏ü‡∏•‡∏ä\n";
      bot.sendMessage(CHAT_ID, welcome, "");
    } else if (text == "/flash") {
      flashState = !flashState;
      digitalWrite(FLASH_LED_PIN, flashState);
      Serial.println("Flash toggled");
      // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö Telegram
      bot.sendMessage(CHAT_ID, "Flash ‡∏ñ‡∏π‡∏Å " + String(flashState ? "‡πÄ‡∏õ‡∏¥‡∏î üí°" : "‡∏õ‡∏¥‡∏î"), "");
    } else if (text == "/photo") {
      // Telegram capture is always immediate capture (no timed flash sequence)
      // and it respects the current flashState.
      if (flashState == HIGH) {
        Serial.println("Photo requested via Telegram (Immediate capture with flash ON).");
      } else {
        Serial.println("Photo requested via Telegram (Immediate capture with flash OFF).");
      }
      // Note: We don't set shouldTurnFlashOffAfterCapture here, as manual toggle implies manual control.
      shouldTurnFlashOffAfterCapture = false; 
      captureState = STATE_CAPTURE; 
    }
  }
}

// ================= Send photo to Telegram (multipart HTTPS) =================
String sendPhotoTelegram() {
  const char* myDomain = "api.telegram.org";
  String getBody = "";

  camera_fb_t* fb = esp_camera_fb_get();
  if (fb) esp_camera_fb_return(fb); 
  delay(50);
  fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return "Camera capture failed";
  }

  if (clientTCP.connect(myDomain, 443)) {
    Serial.println("Connected to api.telegram.org");
    String head = "--theinfoflux\r\nContent-Disposition: form-data; name=\"chat_id\"; \r\n\r\n" + CHAT_ID + "\r\n--theinfoflux\r\nContent-Disposition: form-data; name=\"photo\"; filename=\"esp32-cam.jpg\"\r\nContent-Type: image/jpeg\r\n\r\n";
    String tail = "\r\n--theinfoflux--\r\n";
    uint32_t imageLen = fb->len;
    uint32_t totalLen = imageLen + head.length() + tail.length();

    clientTCP.println("POST /bot" + BOTtoken + "/sendPhoto HTTP/1.1");
    clientTCP.println("Host: " + String(myDomain));
    clientTCP.println("Content-Length: " + String(totalLen));
    clientTCP.println("Content-Type: multipart/form-data; boundary=theinfoflux");
    clientTCP.println();
    clientTCP.print(head);
    
    // send image buffer in chunks
    uint8_t* buf = fb->buf;
    size_t remaining = fb->len;
    while (remaining > 0) {
      size_t chunk = remaining > 1024 ? 1024 : remaining;
      clientTCP.write(buf, chunk);
      buf += chunk;
      remaining -= chunk;
    }

    clientTCP.print(tail);
    esp_camera_fb_return(fb);
    
    // wait and read response (with timeout)
    long start = millis();
    while (millis() - start < 10000) {
      while (clientTCP.available()) {
        char c = clientTCP.read();
        getBody += c;
      }
      if (getBody.length() > 0) break;
      delay(10);
    }
    clientTCP.stop();
    Serial.println("Telegram response:");
    Serial.println(getBody);
  } else {
    Serial.println("Connection to api.telegram.org failed.");
    getBody = "Connect failed";
  }
  return getBody;
}

// ================= Web server endpoints and handlers =================

// Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ State Machine ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)
void handleCapture() {
  unsigned long now = millis();
  if (captureState == STATE_IDLE && now - lastTriggerTime > cooldown) {
    lastTriggerTime = now;
    
    // *** NEW LOGIC: Check flashState to decide flow ***
    if (flashState == HIGH) {
        // ‡πÅ‡∏ü‡∏•‡∏ä‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà -> ‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Timed Flash Sequence
        captureState = STATE_INITIATE_CAPTURE; // State 1: Start flash ON/Delay
        shouldTurnFlashOffAfterCapture = true; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß)
        statusMessage = "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ..."; 
        server.send(200, "text/plain", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û...");
    } else {
        // ‡πÅ‡∏ü‡∏•‡∏ä‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà -> ‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Immediate Capture
        captureState = STATE_CAPTURE; // State 3: Jump directly to capture/send
        shouldTurnFlashOffAfterCapture = false; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß)
        statusMessage = "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ü‡∏•‡∏ä) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...";
        server.send(200, "text/plain", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏±‡∏ô‡∏ó‡∏µ...");
    }
    // *** END NEW LOGIC ***
    
  } else if (captureState != STATE_IDLE) {
      server.send(200, "text/plain", "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà");
  } else {
    String message = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà (Cool-down " + String((cooldown - (now - lastTriggerTime)) / 1000.0, 1) + " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)";
    server.send(200, "text/plain", message);
  }
}

// Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä
void handleFlashToggle() {
  String mode = server.arg("mode");
  if (mode == "on") {
    flashState = HIGH;
    digitalWrite(FLASH_LED_PIN, HIGH);
    server.send(200, "text/plain", "‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üí°");
  } else if (mode == "off") {
    flashState = LOW;
    digitalWrite(FLASH_LED_PIN, LOW);
    server.send(200, "text/plain", "‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } else {
    server.send(400, "text/plain", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }
}


// Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
void handleRoot() {
  String html = "";
  html += "<!DOCTYPE html>";
  html += "<html>";
  html += "<head>";
  html += "<meta charset='UTF-8'>"; // <<<-- ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö
  html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  html += "<title>Smart Box Camera Control</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; background-color: #f0f4f8; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }";
  html += ".container { background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); text-align: center; width: 90%; max-width: 400px; }";
  html += "h1 { color: #007bff; margin-bottom: 25px; font-size: 1.8em; }";
  html += "p { color: #555; margin-bottom: 10px; font-size: 1em; }";
  html += "strong { color: #333; }";
  html += ".status-box { background: " + String(WiFi.status() == WL_CONNECTED ? "#e6ffe6" : "#ffe6e6") + "; padding: 10px; border-radius: 8px; margin-bottom: 20px; border: 1px solid " + String(WiFi.status() == WL_CONNECTED ? "#00cc00" : "#cc0000") + "; }";
  html += ".flash-state { color: " + String(flashState ? "#ffc107" : "#6c757d") + "; font-weight: bold; }";
  html += ".btn-group { margin-top: 15px; display: flex; justify-content: center; gap: 10px; margin-bottom: 25px; }";
  html += ".btn { border: none; padding: 12px 25px; border-radius: 8px; font-size: 1.1em; cursor: pointer; transition: background-color 0.3s, transform 0.1s; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }";
  html += ".btn:active { transform: translateY(1px); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); }";
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Disable)
  html += ".btn:disabled { background-color: #cccccc !important; color: #666666 !important; cursor: not-allowed; box-shadow: none; transform: none; }";
  html += ".btn-flash-on { background-color: #ffc107; color: #333; }";
  html += ".btn-flash-off { background-color: #f8f9fa; color: #333; border: 1px solid #ccc; }";
  html += ".btn-capture { background-color: #28a745; color: white; width: 100%; margin-top: 10px; }";
  html += "#message-area { margin-bottom: 20px; padding: 15px; border-radius: 10px; min-height: 50px; }";
  html += ".success { background-color: #e6ffe6; border: 1px solid #00cc00; color: #008000; }";
  html += ".progress { background-color: #fffbe6; border: 1px solid #ffd700; color: #ccaa00; }";
  html += ".error { background-color: #ffebe6; border: 1px solid #cc0000; color: #cc0000; }"; 
  html += "</style>";
  html += "<script>";
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
  html += "function disableButtons(disable) {";
  html += "  document.querySelectorAll('.btn').forEach(btn => {";
  html += "    btn.disabled = disable;";
  html += "  });";
  html += "}";

  // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Element ‡πÅ‡∏ó‡∏ô alert()
  html += "function sendAction(url) {";
  html += "  disableButtons(true);"; // ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏î
  html += "  const msgArea = document.getElementById('message-area');";
  html += " msgArea.className = 'progress';";
  html += " msgArea.innerHTML = '<p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ ESP32...</p>';";
  
  html += "  fetch(url).then(response => response.text()).then(data => {";
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å server
  html += "    msgArea.className = 'progress';";
  // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ 'data' ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏£‡∏≠‡πÉ‡∏´‡πâ reload ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á statusMessage ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  html += "    msgArea.innerHTML = '<p>‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...</p>';"; 
  
  // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á Capture ‡∏´‡∏£‡∏∑‡∏≠ Flash ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (STATE_IDLE/flashState)
  html += "    if (url.includes('/capture') || url.includes('/flash')) {";
  html += "      setTimeout(() => { window.location.reload(); }, 1500);"; 
  html += "    }";
  html += "  }).catch(error => {";
  html += "    msgArea.className = 'error';";
  html += "    msgArea.innerHTML = '<p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ‡πÑ‡∏°‡πà‡∏û‡∏ö ESP32 ‡∏´‡∏£‡∏∑‡∏≠ Wi-Fi ‡∏´‡∏•‡∏∏‡∏î</p>';";
  html += "    console.error('Fetch error:', error);";
  html += "    disableButtons(false);"; // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  html += "  });";
  html += "}";
  html += "</script>";
  html += "</head>";
  html += "<body>";
  html += "<div class='container'>";
  html += "<h1>Smart Box Camera Control</h1>";

  html += "<div class='status-box'>";
  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô UTF-8
  html += "<p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Wi-Fi:</strong> " + String(WiFi.status() == WL_CONNECTED ? "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‚úÖ" : "‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‚ùå") + "</p>";
  // IP Address ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠
  html += "</div>";

  // ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  html += "<div id='message-area' class='" + String(captureState != STATE_IDLE ? "progress" : (statusMessage.indexOf("‚úÖ") != -1 ? "success" : (statusMessage.indexOf("‚ùå") != -1 ? "error" : ""))) + "'>";
  if (captureState != STATE_IDLE) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
      html += "<p style='font-weight:bold;'>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà (State: " + String(captureState) + ")<br>" + statusMessage + "</p>";
  } else if (statusMessage.length() > 0) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
      html += "<p>" + statusMessage + "</p>";
  } else {
      html += "<p>‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</p>";
  }
  html += "</div>";
  
  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
  html += "<p>‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏ **‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ô‡∏∞‡∏Ñ‡∏∞**</p>";
  html += "<p>‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä‡πÑ‡∏î‡πâ üí°</p>";
  
  html += "<p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ü‡∏•‡∏ä‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <span class='flash-state'>" + String(flashState ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î") + "</span></p>";
  
  html += "<div class='btn-group'>";
  html += "<button class='btn btn-flash-on' onclick=\"sendAction('/flash?mode=on')\">‡πÄ‡∏õ‡∏¥‡∏î</button>";
  html += "<button class='btn btn-flash-off' onclick=\"sendAction('/flash?mode=off')\">‡∏õ‡∏¥‡∏î</button>";
  html += "</div>";

  html += "<p>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ üì∏</p>";
  html += "<button class='btn btn-capture' onclick=\"sendAction('/capture')\">‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û / Capture</button>";
  
  html += "</div>";
  html += "</body>";
  html += "</html>";

  server.send(200, "text/html", html);
}

// ================= SETUP =================
void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); 
  Serial.begin(115200); 
  delay(50); 
  pinMode(FLASH_LED_PIN, OUTPUT); 
  digitalWrite(FLASH_LED_PIN, flashState); // ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ flashState ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  Serial.println(); 
  Serial.println("Starting..."); 
  WiFi.mode(WIFI_STA); 
  // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ String literal ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô UTF-8
  Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi..."); 
  WiFi.begin(ssid, password); 
  
  unsigned long start = millis(); 
  while (WiFi.status() != WL_CONNECTED && millis() - start < 20000) { 
    Serial.print("."); 
    delay(500); 
  }
  Serial.println(); 

  if (WiFi.status() == WL_CONNECTED) { 
    Serial.print("WiFi connected. IP: "); 
    Serial.println(WiFi.localIP()); 
  } else {
    Serial.println("WiFi connect failed or timeout. Continuing (camera init will still try)."); 
  } 

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Root Certificate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram HTTPS
  clientTCP.setCACert(TELEGRAM_CERTIFICATE_ROOT); 

  configInitCameraWithRetry();

  // start web server route
  server.on("/flash", HTTP_GET, handleFlashToggle); 
  server.on("/capture", handleCapture);
  server.on("/", handleRoot); 
  server.begin();
  Serial.println("HTTP server started");
}

// ================= LOOP =================
void loop() {
  server.handleClient();

  // State Machine for Timed Capture
  if (captureState == STATE_INITIATE_CAPTURE) { // State 1: ‡πÄ‡∏£‡∏¥‡πà‡∏° Timed Flash (‡∏ñ‡πâ‡∏≤ flashState ‡πÄ‡∏õ‡πá‡∏ô HIGH ‡πÉ‡∏ô handleCapture)
    // 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°: ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    Serial.println("State 1: Initiating flash ON.");
    digitalWrite(FLASH_LED_PIN, HIGH);
    flashState = HIGH; // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ü‡∏•‡∏ä (‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞ HIGH ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏ï‡∏≤‡∏°)
    flashOnStartTime = millis();
    
    // *** NEW: Update status message after turning flash ON ***
    statusMessage = "üí° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏ü‡∏•‡∏ä... ‡∏†‡∏≤‡∏û‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å " + String(flashDelayMs / 1000.0, 1) + " ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";
    
    captureState = STATE_FLASH_ON_DELAY; // Next is State 2
  } else if (captureState == STATE_FLASH_ON_DELAY) { // State 2: Delay
    // 2. ‡∏£‡∏≠: ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if (millis() - flashOnStartTime >= flashDelayMs) {
      Serial.println("State 2: Delay complete, moving to capture.");
      captureState = STATE_CAPTURE; // Next is State 3 (Capture/Send)
    }
  } 
  
  if (captureState == STATE_CAPTURE) { // State 3: Common Capture/Send point
    // 3. ‡∏ñ‡πà‡∏≤‡∏¢: ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û ‡∏õ‡∏¥‡∏î‡πÅ‡∏ü‡∏•‡∏ä (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà IDLE
    Serial.println("State 3: Capturing and sending photo.");
    
    // *** NEW: Update status message before sending ***
    statusMessage = "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß... ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡πà‡∏∞";
    
    String resp = sendPhotoTelegram();
    
    // *** Conditional Flash OFF based on shouldTurnFlashOffAfterCapture flag ***
    if (shouldTurnFlashOffAfterCapture) {
      Serial.println("Flash OFF (Timed Capture Sequence End).");
      digitalWrite(FLASH_LED_PIN, LOW);
      flashState = LOW; // Update global state
      shouldTurnFlashOffAfterCapture = false; // Reset flag
    } else {
      Serial.println("Flash state preserved (Immediate Capture).");
    }
    // *** End Conditional Flash OFF ***

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì)
    if (resp.indexOf("ok") != -1) {
       statusMessage = "‚úÖ ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞<br><br>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞";
    } else {
       statusMessage = "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ Telegram! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà.";
    }
    
    Serial.println("sendPhotoTelegram done.");
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô IDLE ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    captureState = STATE_IDLE; 
  }

  // Telegram Bot Handler (‡πÄ‡∏î‡∏¥‡∏°)
  if (millis() > lastTimeBotRan + botRequestDelay) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    if (numNewMessages) Serial.printf("Got %d new messages\n", numNewMessages);
    while (numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
}
